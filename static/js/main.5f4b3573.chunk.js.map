{"version":3,"sources":["index.js"],"names":["ControlMode","name","Object","_home_runner_work_infinite_canvas_infinite_canvas_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","this","Mouse","Trackpad","Shape","id","x","y","text","dragging","KeyState","Up","Down","Hold","KeyStateHistory","previous","current","Initial","Key","downEventListenerType","upEventListenerType","buttonCode","keyState","key","_useState","useState","_useState2","_home_runner_work_infinite_canvas_infinite_canvas_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","stateHistory","setStateHistory","holdIntervalRef","React","useRef","useEffect","handler","event","button","state","enqueue","setInterval","document","addEventListener","removeEventListener","clearInterval","MouseLeft","MouseRight","App","_useState3","shapesJSON","localStorage","getItem","JSON","parse","map","shape","assign","e","console","warn","_useState4","shapes","setShapes","_useState5","_useState6","selectedShape","setSelectedShape","_useState7","viewportCoordinatesJSON","_useState8","viewportCoordinates","setViewportCoordinates","mouseRightStateHistory","_useState9","_useState10","canvasPanEnabled","setCanvasPanEnabled","_useState11","controlModeCookieValue","keys","find","controlMode","toLowerCase","_useState12","setControlMode","deltaX","deltaY","preventDefault","movementX","movementY","setItem","stringify","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","style","position","border","padding","zIndex","backgroundColor","right","type","value","checked","onChange","toString","target","Error","shapeEdgeLength","window","innerWidth","innerHeight","top","onClick","uuidv4","concat","_home_runner_work_infinite_canvas_infinite_canvas_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","handleAddRect","_home_runner_work_infinite_canvas_infinite_canvas_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","el","isNaN","valueAsNumber","react_konva__WEBPACK_IMPORTED_MODULE_7__","width","height","getStage","draggable","onDragStart","onDragEnd","fill","wrap","render","getElementById"],"mappings":"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","file":"static/js/main.5f4b3573.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { render } from \"react-dom\";\nimport { Group, Layer, Rect, Stage, Text } from \"react-konva\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass ControlMode {\n  static Mouse = new ControlMode(\"mouse\");\n  static Trackpad = new ControlMode(\"trackpad\");\n\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Shape {\n  constructor(id, x, y, text, dragging) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.text = text;\n    this.dragging = dragging;\n  }\n}\n\nclass KeyState {\n  static Up = new KeyState(\"up\");\n  static Down = new KeyState(\"down\");\n  static Hold = new KeyState(\"hold\");\n\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass KeyStateHistory {\n  static Initial = new KeyStateHistory(null, KeyState.Up);\n\n  constructor(previous, current) {\n    this.previous = previous;\n    this.current = current;\n  }\n\n  enqueue(current) {\n    return new KeyStateHistory(this.current, current);\n  }\n}\n\nclass Key {\n  static MouseLeft = new Key(\"mousedown\", \"mouseup\", 0);\n  static MouseRight = new Key(\"mousedown\", \"mouseup\", 2);\n\n  constructor(downEventListenerType, upEventListenerType, buttonCode) {\n    this.downEventListenerType = downEventListenerType;\n    this.upEventListenerType = upEventListenerType;\n    this.buttonCode = buttonCode;\n  }\n}\n\nfunction keyState(key) {\n  const [stateHistory, setStateHistory] = useState(KeyStateHistory.Initial);\n  const holdIntervalRef = React.useRef(null);\n\n  const startHoldIntervalCounter = () => {\n    if (holdIntervalRef.current) return;\n    holdIntervalRef.current = setInterval(() => {\n      setStateHistory((state) => state.enqueue(KeyState.Hold));\n    }, 100);\n  };\n\n  const stopHoldIntervalCounter = () => {\n    if (holdIntervalRef.current) {\n      clearInterval(holdIntervalRef.current);\n      holdIntervalRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    const handler = (event) => {\n      if (event.button === key.buttonCode) {\n        setStateHistory((state) => state.enqueue(KeyState.Down));\n        startHoldIntervalCounter();\n      }\n    };\n    //TODO customize event listener target\n    document.addEventListener(key.downEventListenerType, handler);\n    return () =>\n      document.removeEventListener(key.downEventListenerType, handler);\n  }, []);\n\n  useEffect(() => {\n    const handler = (event) => {\n      if (event.button === key.buttonCode) {\n        stopHoldIntervalCounter();\n        setStateHistory((state) => state.enqueue(KeyState.Up));\n      }\n    };\n    //TODO customize event listener target\n    document.addEventListener(key.upEventListenerType, handler);\n    return () => document.removeEventListener(key.upEventListenerType, handler);\n  }, []);\n\n  return stateHistory;\n}\n\nconst App = () => {\n  const shapeEdgeLength = 100;\n\n  const [shapes, setShapes] = useState(() => {\n    try {\n      const shapesJSON = localStorage.getItem(\"shapes\");\n      if (shapesJSON) {\n        const shapes = JSON.parse(shapesJSON);\n        return shapes.map((shape) => Object.assign(new Shape(), shape));\n      } else {\n        return [];\n      }\n    } catch (e) {\n      console.warn(\n        \"Failed to get shapes from localStorage, falling back to default\",\n        e\n      );\n      return [];\n    }\n  });\n\n  const [selectedShape, setSelectedShape] = useState(null);\n\n  const [viewportCoordinates, setViewportCoordinates] = useState(() => {\n    try {\n      const viewportCoordinatesJSON = localStorage.getItem(\n        \"viewportCoordinates\"\n      );\n      if (viewportCoordinatesJSON) {\n        return JSON.parse(viewportCoordinatesJSON);\n      } else {\n        return {\n          x: 0,\n          y: 0\n        };\n      }\n    } catch (e) {\n      console.warn(\n        \"Failed to get viewportCoordinates from localStorage, falling back to default\",\n        e\n      );\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n  });\n\n  const mouseRightStateHistory = keyState(Key.MouseRight);\n\n  const [canvasPanEnabled, setCanvasPanEnabled] = useState(false);\n\n  //TODO add automatic detection capability\n  const [controlMode, setControlMode] = useState(() => {\n    try {\n      const controlModeCookieValue = localStorage.getItem(\"controlMode\");\n      if (controlModeCookieValue) {\n        return ControlMode[\n          Object.keys(ControlMode).find(\n            (controlMode) =>\n              controlMode.toLowerCase() === controlModeCookieValue\n          )\n        ];\n      } else {\n        return ControlMode.Mouse;\n      }\n    } catch (e) {\n      console.warn(\n        \"Failed to get controlMode from localStorage, falling back to default\",\n        e\n      );\n      return ControlMode.Mouse;\n    }\n  });\n\n  useEffect(() => {\n    if (controlMode === ControlMode.Trackpad) {\n      const handler = (event) => {\n        setViewportCoordinates((state) => ({\n          x: state.x + -event.deltaX,\n          y: state.y + -event.deltaY\n        }));\n      };\n      document.addEventListener(\"wheel\", handler);\n      return () => document.removeEventListener(\"wheel\", handler);\n    }\n  }, [controlMode]);\n\n  useEffect(() => {\n    const handler = (event) => {\n      event.preventDefault();\n    };\n    document.addEventListener(\"contextmenu\", handler);\n    return () => document.removeEventListener(\"contextmenu\", handler);\n  }, []);\n\n  useEffect(() => {\n    setCanvasPanEnabled(mouseRightStateHistory.current === KeyState.Hold);\n  }, [mouseRightStateHistory]);\n\n  useEffect(() => {\n    if (canvasPanEnabled) {\n      const handler = (event) => {\n        setViewportCoordinates((state) => ({\n          x: state.x + event.movementX,\n          y: state.y + event.movementY\n        }));\n      };\n      document.addEventListener(\"mousemove\", handler);\n      return () => document.removeEventListener(\"mousemove\", handler);\n    }\n  }, [canvasPanEnabled]);\n\n  const handleFocusShape = (event) => {\n    const shape = shapes.find(\n      (shape) => shape.id.toString() === event.target.value\n    );\n    if (!shape) {\n      throw new Error(\"Failed to find shape by id.\");\n    } else {\n      setViewportCoordinates({\n        x: -shape.x - shapeEdgeLength / 2 + window.innerWidth / 2,\n        y: -shape.y - shapeEdgeLength / 2 + window.innerHeight / 2\n      });\n    }\n  };\n\n  //TODO debounce\n  useEffect(() => {\n    localStorage.setItem(\n      \"viewportCoordinates\",\n      JSON.stringify(viewportCoordinates)\n    );\n  }, [viewportCoordinates]);\n\n  useEffect(() => {\n    localStorage.setItem(\"controlMode\", controlMode.name);\n  }, [controlMode]);\n\n  const handleAddRect = () => {\n    const shape = new Shape(\n      uuidv4(),\n      -viewportCoordinates.x + window.innerWidth / 2,\n      -viewportCoordinates.y + window.innerHeight / 2,\n      \"\",\n      false\n    );\n    setShapes((state) => [...state, shape]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"shapes\", JSON.stringify(shapes));\n  }, [shapes]);\n\n  const onSelectedShapeTextChange = (event) => {\n    const value = event.target.value;\n    setSelectedShape((state) => ({ ...state, text: value }));\n    setShapes((shapes) =>\n      shapes.map((el) =>\n        el.id === selectedShape.id\n          ? {\n              ...el,\n              text: value\n            }\n          : el\n      )\n    );\n  };\n\n  const onSelectedShapeXChange = (event) => {\n    let value;\n    if (isNaN(event.target.valueAsNumber)) {\n      value = 0;\n    } else {\n      value = event.target.valueAsNumber;\n    }\n    setSelectedShape((state) => ({ ...state, x: value }));\n    setShapes((shapes) =>\n      shapes.map((el) =>\n        el.id === selectedShape.id\n          ? {\n              ...el,\n              x: value\n            }\n          : el\n      )\n    );\n  };\n\n  const onSelectedShapeYChange = (event) => {\n    let value;\n    if (isNaN(event.target.valueAsNumber)) {\n      value = 0;\n    } else {\n      value = event.target.valueAsNumber;\n    }\n    setSelectedShape((state) => ({ ...state, y: value }));\n    setShapes((shapes) =>\n      shapes.map((el) =>\n        el.id === selectedShape.id\n          ? {\n              ...el,\n              y: value\n            }\n          : el\n      )\n    );\n  };\n\n  return (\n    <>\n      <div\n        style={{\n          position: \"absolute\",\n          border: \"1px solid black\",\n          padding: \"10px\",\n          zIndex: 1,\n          backgroundColor: \"white\"\n        }}\n      >\n        DEBUG\n        <br />\n        Viewport x:{viewportCoordinates.x} y:{viewportCoordinates.y}\n        <br />\n        Mouse right:{mouseRightStateHistory.current.name}\n        <br />\n        Canvas pan enabled:{canvasPanEnabled ? \"true\" : \"false\"}\n        <br />\n        Selected shape: {selectedShape ? selectedShape.id : \"null\"}\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          border: \"1px solid black\",\n          padding: \"10px\",\n          zIndex: 1,\n          right: \"5px\",\n          backgroundColor: \"white\"\n        }}\n      >\n        Control mode:\n        <div>\n          <input\n            type=\"radio\"\n            value={ControlMode.Mouse.name}\n            name=\"control-mode\"\n            checked={controlMode === ControlMode.Mouse}\n            onChange={() => setControlMode(ControlMode.Mouse)}\n          />{\" \"}\n          {ControlMode.Mouse.name}\n          <input\n            type=\"radio\"\n            value={ControlMode.Trackpad.name}\n            name=\"control-mode\"\n            checked={controlMode === ControlMode.Trackpad}\n            onChange={() => setControlMode(ControlMode.Trackpad)}\n          />{\" \"}\n          {ControlMode.Trackpad.name}\n        </div>\n        Focus shape:\n        <select value=\"\" onChange={handleFocusShape}>\n          <option value=\"\" />\n          {shapes.map((shape) => {\n            return (\n              <option key={shape.id} value={shape.id}>\n                {shape.id}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          border: \"1px solid black\",\n          padding: \"10px\",\n          zIndex: 1,\n          top: \"50%\",\n          backgroundColor: \"white\"\n        }}\n      >\n        <button onClick={() => handleAddRect()}>Add Rect</button>\n      </div>\n      {selectedShape ? (\n        <>\n          <div\n            style={{\n              position: \"absolute\",\n              border: \"1px solid black\",\n              padding: \"10px\",\n              zIndex: 1,\n              top: \"50%\",\n              right: \"5px\",\n              backgroundColor: \"white\"\n            }}\n          >\n            Shape\n            <br />\n            ID: {selectedShape.id}\n            <br />\n            Text:\n            <input\n              type=\"text\"\n              onChange={onSelectedShapeTextChange}\n              value={selectedShape.text || \"\"}\n            />\n            X:\n            <input\n              type=\"number\"\n              onChange={onSelectedShapeXChange}\n              value={selectedShape.x}\n            />\n            Y:\n            <input\n              type=\"number\"\n              onChange={onSelectedShapeYChange}\n              value={selectedShape.y}\n            />\n          </div>\n        </>\n      ) : null}\n      <Stage\n        width={window.innerWidth - 20}\n        height={window.innerHeight - 20}\n        onClick={(event) => {\n          if (event.target === event.target.getStage()) {\n            setSelectedShape(null);\n          }\n        }}\n      >\n        <Layer>\n          {shapes.map((shape) => (\n            <Group\n              key={shape.id}\n              x={shape.x + viewportCoordinates.x}\n              y={shape.y + viewportCoordinates.y}\n              draggable\n              onDragStart={() => {\n                setShapes((shapes) =>\n                  shapes.map((el) =>\n                    el.id === shape.id ? { ...el, dragging: true } : el\n                  )\n                );\n              }}\n              onDragEnd={(event) => {\n                setShapes((shapes) =>\n                  shapes.map((el) =>\n                    el.id === shape.id\n                      ? {\n                          ...el,\n                          dragging: false,\n                          x: event.target.x() - viewportCoordinates.x,\n                          y: event.target.y() - viewportCoordinates.y\n                        }\n                      : el\n                  )\n                );\n              }}\n              onClick={() => {\n                setSelectedShape(shape);\n              }}\n            >\n              <Rect\n                width={shapeEdgeLength}\n                height={shapeEdgeLength}\n                fill={shape.dragging ? \"black\" : \"green\"}\n              />\n              <Text\n                x={shapeEdgeLength / 4}\n                y={shapeEdgeLength / 6}\n                text={shape.text}\n                fill={shape.dragging ? \"green\" : \"black\"}\n                wrap=\"char\"\n                width={shapeEdgeLength / 2}\n              />\n            </Group>\n          ))}\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}